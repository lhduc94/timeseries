[["index.html", "Phân tích Chuỗi thời gian Lời nói đầu", " Phân tích Chuỗi thời gian Lê Huỳnh Đức 2023-12-26 Lời nói đầu "],["giới-thiệu-cơ-bản-về-time-series.html", "Chương 1 Giới thiệu Cơ bản về Time Series 1.1 Time Series là gì 1.2 Các patterns Time Series 1.3 Stationary (Tính dừng của dữ liệu) 1.4 Các bài toán về chuỗi thời gian", " Chương 1 Giới thiệu Cơ bản về Time Series 1.1 Time Series là gì Chuỗi thời gian là tập hợp các quan sát \\(x_t\\) theo thời gian tuần tự. Chuỗi thời gian rời rạc là tập hợp các điểm quan sát có khoảng cách quan sát lớn hơn một giây. Chuỗi thời gian rời rạc có thể có những đặc điểm: Thời gian thu thập các điểm dữ liệu có thể là không thường xuyên ( mỗi điểm mỗi phút) hoặc không quy tắc (hành vi đăng nhập của người dùng tại bất cứ thời điểm nào). Có thể bị mất dữ liệu do mất kết nối mạng hoặc máy chủ không phản hồi. Chuỗi thời gian liên tục là tập hợp các điểm quan sát có khoảng cách quan sát là một giây. Thời gian là gì Thời gian có thể định nghĩa theo: Giờ, phút giây Theo không gian: Máy thứ nhất, máy thứ hai trong cùng một băng chuyền Theo độ sâu: Xuống 1 milimet, xuống 2 milimet 1.2 Các patterns Time Series Khi mô tả về chuỗi thời gian, chúng ta thường nhắc đến các yếu tố như xu hướng, chu kỳ và theo mùa. Xu hướng Chúng ta nói dữ liệu có tính xu hướng khi nó tăng hoặc giảm trong một thời gian dài, xu hướng không nhất thiết phải là tăng/giảm tuyến tính, nó có thể là đường cong. Một chuỗi thời gian có thể tồn tại cả xu hướng tăng và xu hướng giảm cùng một lúc. Ví dụ về dân số Việt Nam có xu hướng tăng hằng năm Ví dụ về tỉ lệ tử vong của trẻ sơ sinh có xu hướng giảm dần thời gian nhờ có sự tiến bộ về y tế Ví dụ về sự thay đổi của giá Bitcoin theo thời gian, giá bitcoin có xu hướng tăng mạnh từ giữa tháng 08/2020 đến 03/2021, đến tháng 11/2021 bắt đầu có xu hướng giảm dần Thời vụ Một chuỗi thời gian có tính chất thời vụ khi các giá trị của chuỗi thời gian bị ảnh hưởng bởi thời điểm nào đó trong năm hoặc theo ngày của mỗi tuần. Tính chất thời vụ luôn có tần suất tăng/giảm cố định và đã biết trước. Ví dụ như Số lượng hành khách đặt vé máy bay tăng cao vào các ngày lễ tết. Lượng khách trong nhà hàng tăng cao vào các ngày cuối tuần. Lượng quần áo mua cao nhất vào tháng 12 cuối năm và thấp nhất vào tháng 1 mỗi năm Chu kì Biến đổi chu kỳ xảy ra khi một dữ liệu tăng giảm không có tần suất cố định. Những biến động này thường xảy ra do điều kiện kinh tế và hay gọi là “chu kì kinh doanh”. Độ dài của một chu kì thường ít nhất là 2 năm. 1.3 Stationary (Tính dừng của dữ liệu) Chuỗi thời gian dừng là chuỗi có các đặc trưng thống kê như mean, variance, autocorrelation không đổi theo thời gian. 1.4 Các bài toán về chuỗi thời gian 1.4.1 Dự đoán giá trị tiếp theo dựa trên các giá trị trước đó 1.4.2 Phân loại chuỗi thời gian 1.4.3 Phân đoạn chuỗi thời gian "],["arima.html", "Chương 2 ARIMA 2.1 Lag 2.2 Autocorrelation (Tự tương quan) 2.3 Partial Autocorrelation", " Chương 2 ARIMA 2.1 Lag Lag của Time Series thể hiện việc lùi về một mốc trước đó. Ví dụ lag(1) nghĩa là lùi về trước đó 1 đơn vị \\(X_{T-1}\\). Lag(n) nghĩa là lùi về trước đó n đơn vị \\(X_{T-n}\\) Ví dụ về số lượng quần áo bán ra của US từ năm 1992 đến năm 2019 df = pd.read_csv(&#39;../data/us-retail-sales.csv&#39;) df Month Clothing 0 1992-01-01 6938 1 1992-02-01 7524 2 1992-03-01 8475 3 1992-04-01 9401 4 1992-05-01 9558 ... ... ... 331 2019-08-01 23829 332 2019-09-01 19567 333 2019-10-01 21400 334 2019-11-01 25170 335 2019-12-01 35157 Trong pandas, để tìm lag, ta dùng phương thức shift. Ví dụ df[&#39;lag_1&#39;] = df[&#39;Clothing&#39;].shift(1) df[&#39;lag_3&#39;] = df[&#39;Clothing&#39;].shift(3) df[&#39;lag_12&#39;] = df[&#39;Clothing&#39;].shift(12) df Month Clothing lag_1 lag_3 lag_12 0 1992-01-01 6938 NaN NaN NaN 1 1992-02-01 7524 6938.0 NaN NaN 2 1992-03-01 8475 7524.0 NaN NaN 3 1992-04-01 9401 8475.0 6938.0 NaN 4 1992-05-01 9558 9401.0 7524.0 NaN .. ... ... ... ... ... 331 2019-08-01 23829 21742.0 23079.0 23121.0 332 2019-09-01 19567 23829.0 21116.0 19782.0 333 2019-10-01 21400 19567.0 21742.0 21203.0 334 2019-11-01 25170 21400.0 23829.0 25364.0 335 2019-12-01 35157 25170.0 19567.0 33950.0 2.2 Autocorrelation (Tự tương quan) Correlation Correlation là tương quan giữa 2 biến khác nhau, giá trị correlation nằm trong khoảng từ -1 đến 1, nếu giá trị càng tiến -1 nghĩa là 2 biến có sự tương quan nghịch, giá trị càng tiến đến +1 nghĩa là 2 biến có sự tương quan thuận Autocorrelation Autocorrelation là tương quan giữa một chuỗi timeseries và chuỗi đó với giá trị trước đó của chính nó. Ví dụ tương quan giữa Clothing và lag_1 df[[&#39;Clothing&#39;,&#39;lag_1&#39;]].corr() Clothing lag_1 Clothing 1.000000 0.518296 lag_1 0.518296 1.000000 Tương quan giữa 2 biến này là 0.5 Để tính correlation giữa Timeseries và các lag của nó, ta sử dụng hàm acf trong statsmodel from statsmodels.api import tsa tsa.acf(df[&#39;Clothing&#39;]) array([1. , 0.50679045, 0.42793583, 0.48943282, 0.54920848, 0.51760066, 0.47709491, 0.50840091, 0.5311846 , 0.46104267, 0.38738473, 0.45582436, 0.9264336 , 0.45220705, 0.37936738, 0.43736208, 0.49102051, 0.46205604, 0.42158496, 0.4519868 , 0.47432784, 0.403097 , 0.33531148, 0.40104508, 0.85039363, 0.39243258]) Ở đây correlation giữa Clothing và lag_1 là 0.507, hơi khác so với dùng pandas, trong khuôn khổ phần này ta tập trung vào thư viện statsmodel hơn Để visualize các giá trị correlation này ta dùng hàm plot_acf, ví dụ vẽ autocorrelation với lag tối đa là 30 import matplotlib.pyplot as plt from statsmodels.graphics.tsaplots import plot_acf fig, ax = plt.subplots(figsize=(10, 5)) plot_acf(df[&#39;Clothing&#39;], lags=30, ax=ax) _ =plt.xticks(list(range(31))) plt.show() Trong hình vẽ ta có thể thấy, correlation tại lag=12 và lag=24 có giá trị rất cao, do đó có thể suy đoán được timeseries này có tính tuần hoàn sau 12 tháng 2.2.0.1 Ứng dụng của Autocorrelation Xử lý Tín Hiệu và Thời Gian: Phân tích chuỗi thời gian: Được sử dụng để phát hiện chu kỳ, mô hình chuỗi thời gian, và dự đoán giá trị trong tương lai. Xử lý âm thanh: Trong xử lý tín hiệu âm thanh, tự động tương quan có thể được sử dụng để phát hiện các tần số quan trọng và các sự kiện lặp lại trong dữ liệu âm thanh. Khoa học Dữ Liệu: Phân tích dữ liệu: Trong khoa học dữ liệu và thống kê, tự động tương quan giúp phát hiện mối tương quan giữa các biến và mô tả sự phụ thuộc thời gian của dữ liệu. Phát hiện xu hướng và chu kỳ: Tự động tương quan có thể giúp xác định xu hướng và chu kỳ trong dữ liệu, giúp các nhà nghiên cứu và chuyên gia dự đoán và phân tích xu hướng thị trường, tình hình thời tiết, và nhiều ứng dụng khác. Kỹ thuật và Kỹ thuật số: Xử lý ảnh: Trong xử lý ảnh, tự động tương quan có thể được sử dụng để phát hiện biến đổi không gian và mô hình hình dạng. Kỹ thuật số và mạng truyền thông: Trong mạng truyền thông số và kỹ thuật số, tự động tương quan giúp phân tích tín hiệu, phát hiện tín hiệu trong nhiễu và cải thiện chất lượng truyền thông. Tài chính và Kinh tế: Phân tích thị trường: Trong tài chính, tự động tương quan giúp phân tích và dự đoán xu hướng thị trường, giúp các nhà giao dịch và nhà đầu tư hiểu rõ hơn về sự biến động và rủi ro trong thị trường tài chính. Khoa học và Tâm lý học: Nghiên cứu tâm lý: Trong nghiên cứu tâm lý, tự động tương quan có thể được sử dụng để phân tích sự phụ thuộc thời gian của các biến tâm lý và hành vi, giúp hiểu rõ hơn về sự ảnh hưởng và tương tác giữa các yếu tố khác nhau trong tâm lý học. Như vậy, tự động tương quan là một công cụ quan trọng và linh hoạt, được sử dụng rộng rãi trong nhiều lĩnh vực để phân tích, mô hình, và hiểu rõ hơn về sự phụ thuộc và tương tác trong dữ liệu và các hệ thống phức tạp. 2.3 Partial Autocorrelation Partial Autocorrelation cũng tương tự như Autocorrelation. Tuy nhiên, nó mở rộng hơn bằng cách loại bỏ ảnh hưởng của các mốc thời gian trước đó. Ví dụ tương quan Partial Autocorrelation với lag = 3 sẽ bỏ qua các giá trị trễ tại lag = 1 và lag = 2 "],["smoothing.html", "Chương 3 Smoothing 3.1 Moving Average Smoothing 3.2 Exponential Smoothing", " Chương 3 Smoothing Kỹ thuật làm mịn là một trong các kỹ thuật tiền xử lý dữ liệu để loại bỏ các nhiễu trong dữ liệu. Việc làm mịn dữ liệu giúp thể hiện rõ tính mùa vụ của dữ liệu và giúp đơn giản hóa các mô hình dự đoán. Các kỹ thuật làm mịn dữ liệu bao gồm: Làm mịn trung bình trượt (Moving Average Smoothing) Làm mịn cấp số nhân (Exponential smoothing) 3.1 Moving Average Smoothing Có 2 loại trung bình trượt : Centered MA và Trailing MA 3.1.1 Centered Moving Average Với trung bình trượt với cửa sổ trượt \\(k\\) bằng 3 ta có: \\[\\begin{align} \\Large S_{T} = \\frac{y_{T+1} + y_{T} + y_{T-1}}{3} \\end{align}\\] Tổng quát hơn \\[\\begin{align} \\Large S_{T} = \\frac{1}{m} \\sum_{j=-m}^{m}{y_{T+j}} \\end{align}\\] Trong đó \\(k = 2m + 1\\) Phương pháp này sử dụng giá trị tương lai \\(y_{T+1}\\) do đó không áp dụng được vào các mô hình dự báo. Phương pháp dùng để thống kê mô tả dữ liệu 3.1.2 Trailing Moving Average Với trung bình trượt với cửa sổ trượt \\(k\\) bằng 3 ta có \\[\\begin{align} \\Large S_{T} = \\frac{y_{T} + y_{T - 1} + y_{T - 2}}{3} \\end{align}\\] Tổng quát hơn \\[\\begin{align} \\Large S_{T} = \\frac{1}{k} \\sum^{k}_{i=1}{y_{T-i+1}} \\end{align}\\] Phương pháp này chỉ sử dụng dữ liệu quá khứ nên có thể áp dụng cho việc dự báo các giá trị tương lai 3.1.3 Ví dụ Dưới đây là ví dụ về số Sales quần áo của US df = pd.read_csv(&#39;../data/us-retail-sales.csv&#39;) df[&#39;lag_1&#39;] = df[&#39;Clothing&#39;].shift(1) df[&#39;lag_2&#39;] = df[&#39;Clothing&#39;].shift(2) df[&#39;lead_1&#39;] = df[&#39;Clothing&#39;].shift(-1) df[&#39;Centered_MA&#39;] = (df[&#39;Clothing&#39;] + df[&#39;lead_1&#39;] + df[&#39;lag_1&#39;])/3 df[&#39;Trailing_MA&#39;] = (df[&#39;Clothing&#39;] + df[&#39;lag_1&#39;] + df[&#39;lag_2&#39;])/3 Month Clothing lag_1 lag_2 lead_1 Centered_MA Trailing_MA 275 2014-12-01 32760 NaN NaN 15840.0 NaN NaN 276 2015-01-01 15840 32760.0 NaN 18079.0 22226.333333 NaN 277 2015-02-01 18079 15840.0 32760.0 20819.0 18246.000000 22226.333333 278 2015-03-01 20819 18079.0 15840.0 20470.0 19789.333333 18246.000000 279 2015-04-01 20470 20819.0 18079.0 22239.0 21176.000000 19789.333333 ... ... ... ... ... ... ... ... 331 2019-08-01 23829 21742.0 21116.0 19567.0 21712.666667 22229.000000 332 2019-09-01 19567 23829.0 21742.0 21400.0 21598.666667 21712.666667 333 2019-10-01 21400 19567.0 23829.0 25170.0 22045.666667 21598.666667 334 2019-11-01 25170 21400.0 19567.0 35157.0 27242.333333 22045.666667 335 2019-12-01 35157 25170.0 21400.0 NaN NaN 27242.333333 Ta cũng có thể sử dụng phương thức rolling() trong Pandas df[&#39;Centered_MA&#39;] = df[&#39;Clothing&#39;].rolling(window=3, center=True).mean() df[&#39;Trailing_MA&#39;] = df[&#39;Clothing&#39;].rolling(window=3, center=False).mean() Để visualize dữ liệu, ta có thể dùng seaborn import seaborn as sns import matplotlib.pyplot as plt plt.figure(figsize=(10,5)) plt.title(&quot;US Retail Sale - Clothing&quot;, fontsize=15) sns.lineplot(x=&#39;Month&#39;, y=&#39;Clothing&#39;, data=df, label=&#39;original&#39;) # sns.lineplot(x=&#39;Month&#39;, y=&#39;Centered_MA&#39;, data=df, label=&#39;Centered_MA&#39;) sns.lineplot(x=&#39;Month&#39;, y=&#39;Centered_MA&#39;, data=df, label=&#39;Trailing_MA&#39;) plt.xlabel(&#39;Month&#39;,fontsize=15) plt.yticks(fontsize=15) plt.ylabel(&#39;Clothing&#39;,fontsize=15) plt.legend(fontsize=15) Với dữ liệu bao gồm xu hướng và mùa vụ, việc gia tăng cửa sổ trượt giúp loại bỏ tính mùa vụ và chỉ để lại tính xu hướng. Ví dụ dưới đây cho dữ liệu Số Vật liệu xây dựng đã sử dụng ở Mỹ với các tham số \\(k =6\\) và \\(k=12\\) 3.2 Exponential Smoothing Hàm làm mịn Exponential là một hàm làm mịn sử dụng hàm mũ. Trong khi các hàm Moving Average đơn giản sử dụng các giá trị quá khứ với trọng số bằng nhau thì hàm Exponential sử dụng hàm số mũ cho trọng số đảm bảo giảm dần theo thời gian. Hàm làm mịn Exponential thường áp dụng vào xử lý tín hiệu số để lọc những nhiễu có tầm số cao. Hàm này là dạy truy hồi với công thức như sau \\[ \\begin{aligned} S_{0} = Y_{0} \\\\ S_{T} = \\alpha Y_{T} + (1 - \\alpha)S_{T-1}, T &gt; 0 \\end{aligned} \\] Trong đó \\(\\alpha\\) được gọi là tham số smoothing và \\(0 &lt; \\alpha &lt; 1\\) Tại sao lại gọi là Hàm mũ Với công thức Truy hồi trên ta có thể biến đổi như sau \\[ \\begin{aligned} S_T = \\alpha Y_T + (1 - \\alpha)S_{T-1} \\\\ S_T = \\alpha Y_T + (1 - \\alpha)(\\alpha Y_{T-1} + (1 - \\alpha)S_{T-2})\\\\ S_T = \\alpha Y_T + \\alpha(1 - \\alpha)Y_{T-1} + (1-\\alpha)^2S_{T-2}\\\\ S_T = \\alpha[Y_T + (1 - \\alpha)Y_{T-1} + (1-\\alpha)^2Y_{T-2} + (1-\\alpha)^3Y_{T-3} + ... +(1-\\alpha)^TY_0] \\end{aligned} \\] Ta có thể thấy \\(S_T\\) có liên quan đến trung bình các giá trị với các trọng số \\(1, (1-\\alpha), (1-\\alpha)^2, ....,(1-\\alpha)^T\\) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
